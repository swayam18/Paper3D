$fn = 48;

polyhedron(faces = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19, 20], [21, 22, 23], [24, 25, 26], [27, 28, 29], [30, 31, 32], [33, 34, 35], [36, 37, 38], [39, 40, 41], [42, 43, 44], [45, 46, 47], [48, 49, 50], [51, 52, 53], [54, 55, 56], [57, 58, 59], [60, 61, 62], [63, 64, 65], [66, 67, 68], [69, 70, 71], [72, 73, 74], [75, 76, 77], [78, 79, 80], [81, 82, 83], [84, 85, 86], [87, 88, 89], [90, 91, 92], [93, 94, 95], [96, 97, 98], [99, 100, 101], [102, 103, 104], [105, 106, 107], [108, 109, 110], [111, 112, 113], [114, 115, 116], [117, 118, 119], [120, 121, 122], [123, 124, 125], [126, 127, 128], [129, 130, 131], [132, 133, 134], [135, 136, 137], [138, 139, 140], [141, 142, 143], [144, 145, 146], [147, 148, 149]], points = [[-0.0197970438, 0.5200597164, 0.8938651642], [-0.5148854020, -0.3680511346, 0.8938651647], [0.5157228033, -0.3766562494, 0.8938651698], [-0.5148854020, -0.3680511358, 0.8938651671], [-0.0465754452, -1.2955960981, 0.8938651750], [0.5157228033, -0.3766562483, 0.8938651673], [-0.5148854067, -0.3680511381, 0.8938651469], [-0.6637051210, -1.2257942806, 0.8938651625], [-0.0465754405, -1.2955960957, 0.8938651952], [-1.4359615178, -1.1098392662, 0.8938651509], [-0.6637051189, -1.2257942809, 0.8938651523], [-0.5148854087, -0.3680511378, 0.8938651571], [-1.3945476113, -0.0792896733, 0.8938651499], [-1.4359615184, -1.1098392654, 0.8938651461], [-0.5148854081, -0.3680511386, 0.8938651619], [-2.3718161681, -0.3650878320, 0.8938651420], [-1.4359615238, -1.1098392652, 0.8938651358], [-1.3945476059, -0.0792896735, 0.8938651601], [-2.3718161667, -0.3650878302, 0.8938651527], [-2.3520727287, -1.3221213497, 0.8938651721], [-1.4359615252, -1.1098392669, 0.8938651251], [-1.8060195407, -1.8064059542, 0.8938651605], [-1.4359615234, -1.1098392746, 0.8938651448], [-2.3520727305, -1.3221213421, 0.8938651524], [-2.5994246235, -2.5539206135, 0.8938651691], [-1.8060195367, -1.8064059497, 0.8938651646], [-2.3520727345, -1.3221213467, 0.8938651482], [-2.5994246228, -2.5539206136, 0.8938651540], [-2.3520727352, -1.3221213465, 0.8938651633], [-3.1561238368, -2.3057168402, 0.8938651517], [-3.3543664247, -1.6545440762, 0.8938651524], [-3.1561238372, -2.3057168399, 0.8938651599], [-2.3520727347, -1.3221213469, 0.8938651551], [-4.1258940159, -2.0569066278, 0.8938651105], [-3.1561238344, -2.3057168390, 0.8938651589], [-3.3543664275, -1.6545440770, 0.8938651534], [-4.1258940178, -2.0569066354, 0.8938651268], [-3.8698913280, -2.9318929019, 0.8938651301], [-3.1561238324, -2.3057168313, 0.8938651425], [-4.4292943540, -2.7532568583, 0.8938651251], [-3.8698913291, -2.9318929022, 0.8938651207], [-4.1258940168, -2.0569066351, 0.8938651362], [-4.6543258779, -2.2681289288, 0.8938651306], [-4.4292943543, -2.7532568581, 0.8938651335], [-4.1258940164, -2.0569066353, 0.8938651278], [-4.1258940161, -2.0569066359, 0.8938651326], [-4.8692232015, -1.5517425494, 0.8938651296], [-4.6543258781, -2.2681289281, 0.8938651258], [-4.6110490456, -1.6237767952, 0.8938651238], [-4.8692232025, -1.5517425509, 0.8938651239], [-4.1258940151, -2.0569066344, 0.8938651383], [-4.5839157883, -1.5283849320, 0.8938651239], [-4.8692232025, -1.5517425509, 0.8938651238], [-4.6110490456, -1.6237767952, 0.8938651239], [-5.3726804311, -1.9887836486, 0.8938651198], [-4.6543258779, -2.2681289281, 0.8938651308], [-4.8692232018, -1.5517425495, 0.8938651246], [-4.0646155447, -1.3913213770, 0.8938651303], [-4.1258940180, -2.0569066237, 0.8938651299], [-3.3543664254, -1.6545440811, 0.8938651340], [-4.3127768202, -1.4339686821, 0.8938651261], [-4.1258940172, -2.0569066238, 0.8938651339], [-4.0646155454, -1.3913213769, 0.8938651262], [-4.2347345927, -1.3727703819, 0.8938651261], [-4.3127768202, -1.4339686821, 0.8938651260], [-4.0646155454, -1.3913213769, 0.8938651263], [-3.1561238368, -2.3057168404, 0.8938651537], [-3.2680576281, -3.2486014227, 0.8938651517], [-2.5994246227, -2.5539206135, 0.8938651520], [-3.2680576277, -3.2486014231, 0.8938651458], [-2.7516002776, -3.4684006104, 0.8938651424], [-2.5994246232, -2.5539206131, 0.8938651579], [-2.7516002766, -3.4684006106, 0.8938651497], [-2.2668715653, -3.2251532348, 0.8938651549], [-2.5994246242, -2.5539206129, 0.8938651506], [-2.5994246237, -2.5539206133, 0.8938651789], [-1.9512405357, -2.3468609080, 0.8938651720], [-1.8060195365, -1.8064059499, 0.8938651548], [-1.9512405390, -2.3468609071, 0.8938651627], [-1.3506663612, -2.4015077464, 0.8938651580], [-1.8060195332, -1.8064059508, 0.8938651641], [-2.5994246235, -2.5539206139, 0.8938651703], [-1.9760626540, -2.9693295987, 0.8938651883], [-1.9512405359, -2.3468609074, 0.8938651806], [-1.9760626551, -2.9693295987, 0.8938651880], [-1.6075710038, -2.6897071525, 0.8938651819], [-1.9512405348, -2.3468609075, 0.8938651809], [-1.9512405341, -2.3468609068, 0.8938651771], [-1.6075710045, -2.6897071532, 0.8938651858], [-1.3921347163, -2.5728615805, 0.8938651859], [-1.6075710045, -2.6897071532, 0.8938651858], [-1.4695105484, -2.6685079761, 0.8938651857], [-1.3921347163, -2.5728615805, 0.8938651858], [-1.4359615236, -1.1098392745, 0.8938651612], [-1.8060195406, -1.8064059543, 0.8938651441], [-0.8853190992, -1.6635706456, 0.8938651391], [-1.8060195405, -1.8064059547, 0.8938651360], [-1.1111344310, -2.0868116304, 0.8938651390], [-0.8853190992, -1.6635706452, 0.8938651472], [-3.2427522262, -0.7548581431, 0.8938651631], [-2.3520727292, -1.3221213498, 0.8938651517], [-2.3718161662, -0.3650878302, 0.8938651731], [-3.1064396108, -0.0097682972, 0.8938651733], [-3.2427522276, -0.7548581400, 0.8938651601], [-2.3718161648, -0.3650878333, 0.8938651761], [-2.3718161692, -0.3650878282, 0.8938651509], [-1.3945476048, -0.0792896773, 0.8938651513], [-2.1762175108, 0.5324703375, 0.8938651375], [-2.1762175101, 0.5324703384, 0.8938651459], [-1.3945476055, -0.0792896781, 0.8938651429], [-1.5488899062, 0.7581563622, 0.8938651434], [-2.6079321465, 0.4160477706, 0.8938651457], [-2.3718161673, -0.3650878287, 0.8938651470], [-2.1762175127, 0.5324703379, 0.8938651414], [-2.4610448643, 0.5038472919, 0.8938651434], [-2.6079321465, 0.4160477703, 0.8938651430], [-2.1762175128, 0.5324703383, 0.8938651441], [-1.3945476097, -0.0792896683, 0.8938651502], [-0.5148854097, -0.3680511436, 0.8938651616], [-0.8641165289, 0.5868786923, 0.8938651599], [-0.6637051216, -1.2257942861, 0.8938651741], [-0.3829245050, -1.6147515344, 0.8938651799], [-0.0465754399, -1.2955960902, 0.8938651836], [-0.3829245050, -1.6147515344, 0.8938651829], [-0.2619072863, -1.6368894022, 0.8938651829], [-0.0465754400, -1.2955960902, 0.8938651805], [0.5157227969, -0.3766562444, 0.8938652032], [-0.0465754388, -1.2955961020, 0.8938651392], [0.8670227048, -1.2531140710, 0.8938652097], [1.3707085663, -1.0054440608, 0.8938651896], [0.5157227937, -0.3766562457, 0.8938652202], [0.8670227080, -1.2531140697, 0.8938651926], [1.2769982880, -0.4257364067, 0.8938651961], [0.5157227936, -0.3766562458, 0.8938652084], [1.3707085664, -1.0054440607, 0.8938652014], [-0.0465754385, -1.2955961090, 0.8938651588], [0.5094861433, -1.6609115834, 0.8938651553], [0.8670227044, -1.2531140641, 0.8938651901], [-0.0465754384, -1.2955961088, 0.8938651565], [0.0565288869, -1.7547440592, 0.8938651581], [0.5094861432, -1.6609115835, 0.8938651577], [-0.0465754383, -1.2955961088, 0.8938651590], [-0.0712746699, -1.6983849826, 0.8938651584], [0.0565288868, -1.7547440592, 0.8938651556], [-0.0197970423, 0.5200597173, 0.8938651631], [0.5157228018, -0.3766562503, 0.8938651709], [0.7407981403, 0.6448075327, 0.8938651821], [0.7407981384, 0.6448075331, 0.8938651900], [0.5157228037, -0.3766562507, 0.8938651630], [1.0246797394, 0.1915972827, 0.8938651824]]);
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#! /usr/bin/env python
from __future__ import division
import os
import sys
import re
import tree
import utilities
from numpy import array,cross
from tree import TriangleNode, parseArrayIntoTree, parseEdgeArrayIntoTree, cutTreeIntoPatches
from stl_reader import Reader
from graph2 import Graph,TreeNode,treeLength
from utilities import getMatrixArbitraryAxis
from dxf_writer import DXFWriter
from evolution import TreeWorld
from obj_reader import ObjReader

# Assumes SolidPython is in site-packages or elsewhwere in sys.path
from solid import *
from solid.utils import *

SEGMENTS = 48
filename = "uv_sphere.obj"
triangles = ObjReader().read("obj/sphere/" + filename)
print triangles[0]
# triangles = Reader.read("stl/icosahedron.stl")
g = Graph(triangles)
n = len(g.nodes)
print "There are a total of ", n, " nodes"
hFn = lambda e: g.defaultHeuristic(e)
msp = g.toMSPTree(hFn)
edge_rep = msp.makeEdgeRepresentation()

hFn = lambda e: -g.defaultHeuristic(e)
msp2 = g.toMSPTree(hFn)
edge_rep2 = msp2.makeEdgeRepresentation()

world = TreeWorld(g, [edge_rep, edge_rep2])
child1 = world.generateFittest(maxGenerations=1)
print child1
tn = parseEdgeArrayIntoTree(g.nodes, child1)
print treeLength(msp,set()), "faces"
#tn = parseArrayIntoTree(g.nodes, array_rep)
tn.unfold()
v = tn.getAllChildVertices()
v2d = tn.getAllChildVertices2D()


tn.getAllChildTriangles()
kdtree = utilities.makeKDTree(tn.getAllChildTriangles())

intersects = tn.checkIntersection() # return nodes thats intersect
print len(intersects), "faces that intersects"
paths = world.paths_intersection(child1)
cutEdges = g.cutEdges(paths)
print "Edges to cut:", cutEdges
tns = cutTreeIntoPatches(tn,cutEdges)
ds = [tn.convertToDict() for tn in tns]
print "No of Patches:", len(ds)


#v_i = [ x.getTransformedVertices2D() for x in intersects ]
#v = reduce(lambda x,y: x+y, v_i)

#print [x.node for x in xs]
#print len(xs)


#array_rep = [19, 55, 115, 49, -1, 147, 55, 194, 230, 180, 14, 82, 8, 198, 157, 197, 196, 81, 254, 240, 148, 120, 26, 46, 181, 123, 210, 223, 125, 143, 52, 21, 107, 16, 212, 250, 125, 73, 196, 27, 75, 249, 167, 39, 57, 103, 166, 23, 207, 15, 3, 240, 178, 191, 33, 181, 111, 29, 184, 177, 7, 92, 118, 59, 15, 93, 129, 58, 199, 94, 97, 98, 40, 61, 143, 64, 234, 251, 75, 91, 32, 78, 186, 133, 76, 134, 90, 4, 187, 218, 51, 49, 218, 182, 106, 43, 176, 138, 121, 63, 216, 151, 36, 10, 149, 146, 47, 226, 198, 133, 66, 104, 103, 46, 162, 10, 113, 251, 25, 83, 114, 62, 11, 5, 114, 206, 120, 38, 245, 185, 159, 110, 238, 1, 189, 226, 87, 154, 142, 160, 96, 54, 44, 5, 233, 68, 74, 12, 242, 253, 54, 208, 222, 211, 33, 93, 124, 155, 127, 215, 137, 127, 168, 13, 50, 173, 19, 152, 2, 24, 230, 6, 248, 115, 195, 153, 222, 232, 170, 148, 51, 173, 52, 254, 34, 253, 171, 84, 203, 205, 153, 135, 8, 197, 128, 60, 246, 141, 4, 9, 108, 3, 140, 144, 79, 117, 221, 100, 45, 158, 214, 20, 32, 22, 175, 111, 76, 18, 182, 175, 119, 85, 190, 139, 163, 99, 151, 234, 22, 63, 8, 144, 177, 144, 76, 237, 113, 193, 239, 238, 19, 162, 26, 244, 174, 140, 235, 225, 172, 41, 249, 117, 84, 77, 18, 239]
#print array_rep
#tn = parseArrayIntoTree(g.nodes, array_rep)
#tn.unfold()
#v = tn.getAllChildVertices()

def assembly(v):
    a = polyhedron(
            points=v,
            faces=[[x for x in range(y,y+3)] for y in range(0,len(v),3)])
    return a

def intersecting():
    a = polygon(
            points=v2d,
            paths=[[x for x in range(y,y+3)] for y in range(0,len(v),3)])
    return a

if __name__ == '__main__':
    for i,tn in enumerate(tns):
        v = tn.getAllChildVertices()
        a = assembly(v)
        scad_render_to_file(a,'unfold{0}.scad'.format(i), file_header='$fn = %s;' % SEGMENTS, include_orig_code=True)

        #a = intersecting()
        scad_render_to_file(a,'unfold.scad', file_header='$fn = %s;' % SEGMENTS, include_orig_code=True)
    
    d_writer = DXFWriter(n, ds, filename)
    d_writer.generate_file()
 
 
************************************************/
