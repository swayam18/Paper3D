$fn = 48;

polyhedron(faces = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19, 20], [21, 22, 23], [24, 25, 26], [27, 28, 29], [30, 31, 32], [33, 34, 35], [36, 37, 38], [39, 40, 41], [42, 43, 44], [45, 46, 47], [48, 49, 50], [51, 52, 53], [54, 55, 56], [57, 58, 59], [60, 61, 62], [63, 64, 65], [66, 67, 68], [69, 70, 71], [72, 73, 74], [75, 76, 77], [78, 79, 80], [81, 82, 83], [84, 85, 86], [87, 88, 89], [90, 91, 92], [93, 94, 95], [96, 97, 98], [99, 100, 101], [102, 103, 104], [105, 106, 107], [108, 109, 110], [111, 112, 113], [114, 115, 116], [117, 118, 119], [120, 121, 122], [123, 124, 125], [126, 127, 128], [129, 130, 131], [132, 133, 134], [135, 136, 137], [138, 139, 140], [141, 142, 143], [144, 145, 146], [147, 148, 149]], points = [[-0.0197976144, 0.5200603452, 0.8938654809], [-0.5148858585, -0.3680506018, 0.8938654702], [0.5157226932, -0.3766560208, 0.8938654788], [-0.5148858585, -0.3680506036, 0.8938654746], [-0.0465755025, -1.2955957740, 0.8938654486], [0.5157226932, -0.3766560190, 0.8938654744], [-0.5148858528, -0.3680506007, 0.8938654831], [-0.6637054472, -1.2257946202, 0.8938654463], [-0.0465755083, -1.2955957769, 0.8938654402], [-1.4359618091, -1.1098397465, 0.8938654602], [-0.6637054524, -1.2257946193, 0.8938654692], [-0.5148858476, -0.3680506016, 0.8938654602], [-1.3945477894, -0.0792904780, 0.8938654691], [-1.4359618087, -1.1098397469, 0.8938654664], [-0.5148858480, -0.3680506011, 0.8938654539], [-2.3718165496, -0.3650886098, 0.8938654731], [-1.4359618101, -1.1098397469, 0.8938654654], [-1.3945477880, -0.0792904780, 0.8938654701], [-2.3718165492, -0.3650886094, 0.8938654698], [-2.3520726508, -1.3221225137, 0.8938654785], [-1.4359618105, -1.1098397473, 0.8938654688], [-1.8060193557, -1.8064061648, 0.8938654886], [-1.4359618088, -1.1098397546, 0.8938654525], [-2.3520726525, -1.3221225064, 0.8938654948], [-2.5994242584, -2.5539219177, 0.8938654884], [-1.8060193588, -1.8064061683, 0.8938654853], [-2.3520726494, -1.3221225029, 0.8938654981], [-2.5994242573, -2.5539219180, 0.8938655079], [-2.3520726505, -1.3221225027, 0.8938654787], [-3.1561229294, -2.3057183763, 0.8938655099], [-3.3543664110, -1.6545456152, 0.8938655007], [-3.1561229270, -2.3057183782, 0.8938654960], [-2.3520726529, -1.3221225007, 0.8938654926], [-4.1258932588, -2.0569097043, 0.8938655099], [-3.1561229312, -2.3057183794, 0.8938654912], [-3.3543664068, -1.6545456140, 0.8938655056], [-4.1258932581, -2.0569097018, 0.8938655017], [-3.8698891660, -2.9318953438, 0.8938654985], [-3.1561229319, -2.3057183819, 0.8938654994], [-4.4292920474, -2.7532605453, 0.8938654993], [-3.8698891639, -2.9318953431, 0.8938655141], [-4.1258932603, -2.0569097024, 0.8938654861], [-4.6543249885, -2.2681329226, 0.8938654930], [-4.4292920457, -2.7532605460, 0.8938654988], [-4.1258932619, -2.0569097017, 0.8938654866], [-4.1258932629, -2.0569096993, 0.8938654852], [-4.8692238513, -1.5517474885, 0.8938654945], [-4.6543249875, -2.2681329250, 0.8938654944], [-4.6110492631, -1.6237808429, 0.8938654875], [-4.8692238503, -1.5517474871, 0.8938654936], [-4.1258932639, -2.0569097007, 0.8938654861], [-4.5839166415, -1.5283885145, 0.8938654907], [-4.8692238506, -1.5517474881, 0.8938654904], [-4.6110492629, -1.6237808420, 0.8938654907], [-5.3726805822, -1.9887890385, 0.8938654887], [-4.6543249877, -2.2681329250, 0.8938654939], [-4.8692238512, -1.5517474885, 0.8938654950], [-4.0646159001, -1.3913241336, 0.8938654969], [-4.1258932585, -2.0569097048, 0.8938655084], [-3.3543664071, -1.6545456135, 0.8938655071], [-4.3127771964, -1.4339720323, 0.8938654984], [-4.1258932563, -2.0569097050, 0.8938655070], [-4.0646159023, -1.3913241334, 0.8938654983], [-4.2347350793, -1.3727731497, 0.8938654983], [-4.3127771964, -1.4339720323, 0.8938654982], [-4.0646159023, -1.3913241334, 0.8938654985], [-3.1561229283, -2.3057183740, 0.8938655124], [-3.2680580202, -3.2486024388, 0.8938655301], [-2.5994242583, -2.5539219203, 0.8938655054], [-3.2680580206, -3.2486024384, 0.8938655113], [-2.7516006114, -3.4684016153, 0.8938655108], [-2.5994242579, -2.5539219207, 0.8938655242], [-2.7516006099, -3.4684016156, 0.8938655125], [-2.2668719981, -3.2251554377, 0.8938655320], [-2.5994242593, -2.5539219204, 0.8938655225], [-2.5994242584, -2.5539219177, 0.8938654857], [-1.9512398735, -2.3468621893, 0.8938654766], [-1.8060193588, -1.8064061683, 0.8938654881], [-1.9512398718, -2.3468621898, 0.8938654839], [-1.3506651379, -2.4015074883, 0.8938654916], [-1.8060193606, -1.8064061679, 0.8938654808], [-2.5994242569, -2.5539219226, 0.8938654623], [-1.9760615860, -2.9693306631, 0.8938654842], [-1.9512398750, -2.3468621845, 0.8938654999], [-1.9760615844, -2.9693306632, 0.8938654896], [-1.6075702270, -2.6897084042, 0.8938654990], [-1.9512398766, -2.3468621845, 0.8938654946], [-1.9512398757, -2.3468621835, 0.8938654922], [-1.6075702279, -2.6897084051, 0.8938655013], [-1.3921334562, -2.5728624740, 0.8938655090], [-1.6075702276, -2.6897084056, 0.8938655052], [-1.4695095563, -2.6685088635, 0.8938655051], [-1.3921334565, -2.5728624734, 0.8938655052], [-1.4359618061, -1.1098397560, 0.8938654774], [-1.8060193584, -1.8064061634, 0.8938654637], [-0.8853193945, -1.6635710514, 0.8938654779], [-1.8060193584, -1.8064061635, 0.8938654771], [-1.1111340891, -2.0868121410, 0.8938654628], [-0.8853193946, -1.6635710513, 0.8938654645], [-3.2427527334, -0.7548598756, 0.8938654715], [-2.3520726539, -1.3221225137, 0.8938654632], [-2.3718165461, -0.3650886093, 0.8938654851], [-3.1064407182, -0.0097699982, 0.8938654650], [-3.2427527337, -0.7548598749, 0.8938654821], [-2.3718165458, -0.3650886100, 0.8938654744], [-2.3718165503, -0.3650886072, 0.8938654635], [-1.3945477872, -0.0792904807, 0.8938654797], [-2.1762177797, 0.5324698674, 0.8938654670], [-2.1762177809, 0.5324698658, 0.8938654897], [-1.3945477860, -0.0792904791, 0.8938654570], [-1.5488902180, 0.7581557656, 0.8938654861], [-2.6079325498, 0.4160472486, 0.8938654681], [-2.3718165502, -0.3650886072, 0.8938654675], [-2.1762177798, 0.5324698674, 0.8938654630], [-2.4610450143, 0.5038465951, 0.8938654655], [-2.6079325497, 0.4160472480, 0.8938654658], [-2.1762177799, 0.5324698679, 0.8938654653], [-1.3945477895, -0.0792904782, 0.8938654545], [-0.5148858479, -0.3680506009, 0.8938654685], [-0.8641177325, 0.5868789851, 0.8938654535], [-0.6637054471, -1.2257946192, 0.8938654439], [-0.3829242521, -1.6147511938, 0.8938654459], [-0.0465755084, -1.2955957779, 0.8938654426], [-0.3829242523, -1.6147511936, 0.8938654450], [-0.2619068976, -1.6368892294, 0.8938654449], [-0.0465755082, -1.2955957780, 0.8938654434], [0.5157226895, -0.3766560168, 0.8938654647], [-0.0465754989, -1.2955957762, 0.8938654583], [0.8670225416, -1.2531136780, 0.8938654564], [1.3707084430, -1.0054436281, 0.8938654542], [0.5157226836, -0.3766560192, 0.8938654757], [0.8670225476, -1.2531136756, 0.8938654454], [1.2769986915, -0.4257364091, 0.8938654682], [0.5157226835, -0.3766560193, 0.8938654738], [1.3707084431, -1.0054436280, 0.8938654561], [-0.0465754988, -1.2955957772, 0.8938654492], [0.5094864262, -1.6609107544, 0.8938654384], [0.8670225415, -1.2531136770, 0.8938654655], [-0.0465754980, -1.2955957759, 0.8938654467], [0.0565295579, -1.7547433961, 0.8938654461], [0.5094864253, -1.6609107557, 0.8938654409], [-0.0465754977, -1.2955957758, 0.8938654478], [-0.0712743913, -1.6983845442, 0.8938654487], [0.0565295576, -1.7547433961, 0.8938654450], [-0.0197976191, 0.5200603424, 0.8938654993], [0.5157226978, -0.3766560180, 0.8938654604], [0.7407979968, 0.6448083935, 0.8938655018], [0.7407979944, 0.6448083940, 0.8938654846], [0.5157227002, -0.3766560186, 0.8938654776], [1.0246799190, 0.1915979692, 0.8938654776]]);
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#! /usr/bin/env python
from __future__ import division
import os
import sys
import re
import tree
import utilities
from numpy import array,cross
from tree import TriangleNode, parseArrayIntoTree, parseEdgeArrayIntoTree, cutTreeIntoPatches
from stl_reader import Reader
from graph2 import Graph,TreeNode,treeLength
from utilities import getMatrixArbitraryAxis
from dxf_writer import DXFWriter
from evolution import TreeWorld

# Assumes SolidPython is in site-packages or elsewhwere in sys.path
from solid import *
from solid.utils import *

SEGMENTS = 48
filename = "uv_sphere.stl"
triangles = Reader.read("stl/" + filename)
print triangles[0]
# triangles = Reader.read("stl/icosahedron.stl")
g = Graph(triangles)
n = len(g.nodes)
print "There are a total of ", n, " nodes"
hFn = lambda e: g.defaultHeuristic(e)
msp = g.toMSPTree(hFn)
edge_rep = msp.makeEdgeRepresentation()

hFn = lambda e: -g.defaultHeuristic(e)
msp2 = g.toMSPTree(hFn)
edge_rep2 = msp2.makeEdgeRepresentation()

world = TreeWorld(g, [edge_rep, edge_rep2])
child1 = world.generateFittest(maxGenerations=1)
print child1
tn = parseEdgeArrayIntoTree(g.nodes, child1)
print treeLength(msp,set()), "faces"
#tn = parseArrayIntoTree(g.nodes, array_rep)
tn.unfold()
v = tn.getAllChildVertices()
v2d = tn.getAllChildVertices2D()


tn.getAllChildTriangles()
kdtree = utilities.makeKDTree(tn.getAllChildTriangles())

intersects = tn.checkIntersection() # return nodes thats intersect
print len(intersects), "faces that intersects"
paths = world.paths_intersection(child1)
cutEdges = g.cutEdges(paths)
print "Edges to cut:", cutEdges
tns = cutTreeIntoPatches(tn,cutEdges)
ds = [tn.convertToDict() for tn in tns]
print "No of Patches:", len(ds)


#v_i = [ x.getTransformedVertices2D() for x in intersects ]
#v = reduce(lambda x,y: x+y, v_i)

#print [x.node for x in xs]
#print len(xs)


#array_rep = [19, 55, 115, 49, -1, 147, 55, 194, 230, 180, 14, 82, 8, 198, 157, 197, 196, 81, 254, 240, 148, 120, 26, 46, 181, 123, 210, 223, 125, 143, 52, 21, 107, 16, 212, 250, 125, 73, 196, 27, 75, 249, 167, 39, 57, 103, 166, 23, 207, 15, 3, 240, 178, 191, 33, 181, 111, 29, 184, 177, 7, 92, 118, 59, 15, 93, 129, 58, 199, 94, 97, 98, 40, 61, 143, 64, 234, 251, 75, 91, 32, 78, 186, 133, 76, 134, 90, 4, 187, 218, 51, 49, 218, 182, 106, 43, 176, 138, 121, 63, 216, 151, 36, 10, 149, 146, 47, 226, 198, 133, 66, 104, 103, 46, 162, 10, 113, 251, 25, 83, 114, 62, 11, 5, 114, 206, 120, 38, 245, 185, 159, 110, 238, 1, 189, 226, 87, 154, 142, 160, 96, 54, 44, 5, 233, 68, 74, 12, 242, 253, 54, 208, 222, 211, 33, 93, 124, 155, 127, 215, 137, 127, 168, 13, 50, 173, 19, 152, 2, 24, 230, 6, 248, 115, 195, 153, 222, 232, 170, 148, 51, 173, 52, 254, 34, 253, 171, 84, 203, 205, 153, 135, 8, 197, 128, 60, 246, 141, 4, 9, 108, 3, 140, 144, 79, 117, 221, 100, 45, 158, 214, 20, 32, 22, 175, 111, 76, 18, 182, 175, 119, 85, 190, 139, 163, 99, 151, 234, 22, 63, 8, 144, 177, 144, 76, 237, 113, 193, 239, 238, 19, 162, 26, 244, 174, 140, 235, 225, 172, 41, 249, 117, 84, 77, 18, 239]
#print array_rep
#tn = parseArrayIntoTree(g.nodes, array_rep)
#tn.unfold()
#v = tn.getAllChildVertices()

def assembly(v):
    a = polyhedron(
            points=v,
            faces=[[x for x in range(y,y+3)] for y in range(0,len(v),3)])
    return a

def intersecting():
    a = polygon(
            points=v2d,
            paths=[[x for x in range(y,y+3)] for y in range(0,len(v),3)])
    return a

if __name__ == '__main__':
    for i,tn in enumerate(tns):
        v = tn.getAllChildVertices()
        a = assembly(v)
        scad_render_to_file(a,'unfold{0}.scad'.format(i), file_header='$fn = %s;' % SEGMENTS, include_orig_code=True)

        #a = intersecting()
        scad_render_to_file(a,'unfold.scad', file_header='$fn = %s;' % SEGMENTS, include_orig_code=True)
    
    d_writer = DXFWriter(n, ds, filename)
    d_writer.generate_file()
 
 
************************************************/
