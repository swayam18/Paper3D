$fn = 48;

polyhedron(points = [[-14.6088364060, 11.9224002258, 95.2417413936], [-74.2194118880, -20.8499445172, 95.2417414959], [-43.9609988186, -58.6307821971, 95.2417413475], [-14.6088364249, 11.9224002602, 95.2417411998], [-63.2480040173, 64.0665518239, 95.2417407722], [-74.2194118691, -20.8499445516, 95.2417416897], [-16.8746096108, 105.9689640491, 95.2417411069], [-63.2480040033, 64.0665518369, 95.2417407523], [-14.6088364388, 11.9224002472, 95.2417412198], [-14.6088364576, 11.9224002468, 95.2417404413], [28.7341095768, 90.0215326724, 95.2417423191], [-16.8746095920, 105.9689640496, 95.2417418854], [45.4585852275, 127.4396164272, 95.2417416643], [-16.8746095061, 105.9689642950, 95.2417421168], [28.7341094910, 90.0215324269, 95.2417420877], [-16.8746094976, 105.9689642701, 95.2417419510], [45.4585852189, 127.4396164521, 95.2417418302], [-9.7653472230, 150.9053156530, 95.2417425214], [45.4585851488, 127.4396162872, 95.2417421631], [55.2944322450, 161.8221984817, 95.2417420022], [-9.7653471529, 150.9053158179, 95.2417421884], [80.2684495402, 145.3352136323, 95.2417433906], [55.2944322883, 161.8221984693, 95.2417420389], [45.4585851056, 127.4396162995, 95.2417421264], [-9.7653471507, 150.9053158050, 95.2417421221], [55.2944322429, 161.8221984945, 95.2417420685], [-1.2223906149, 206.6581190799, 95.2417423280], [-1.2223904532, 206.6581190551, 95.2417425142], [-51.1591042007, 145.2794948846, 95.2417423299], [-9.7653473125, 150.9053158298, 95.2417419359], [-49.5185257244, 217.5726028128, 95.2417420877], [-51.1591042808, 145.2794949497, 95.2417420307], [-1.2223903731, 206.6581189899, 95.2417428134], [55.2944322480, 161.8221985010, 95.2417421894], [70.7428632931, 226.5500057028, 95.2417423264], [-1.2223906201, 206.6581190734, 95.2417422071], [32.3471504785, 281.0381349234, 95.2417437199], [-1.2223905813, 206.6581189331, 95.2417430946], [70.7428632544, 226.5500058430, 95.2417414389], [67.4214933395, 278.5339081098, 95.2417418321], [32.3471504374, 281.0381348945, 95.2417418877], [70.7428632954, 226.5500058720, 95.2417432712], [32.3471504371, 281.0381348896, 95.2417418399], [67.4214933399, 278.5339081147, 95.2417418799], [68.7573108455, 374.8971619423, 95.2417416867], [98.7868158638, 298.5792001804, 95.2417411660], [68.7573108133, 374.8971619427, 95.2417419717], [67.4214933721, 278.5339081142, 95.2417415948], [68.7573101670, 374.8971616884, 95.2417428898], [98.7868165101, 298.5792004347, 95.2417402479], [88.4875211522, 372.2912045533, 95.2417419193], [93.9724138589, 425.5834809523, 95.2417434881], [68.7573100066, 374.8971604739, 95.2417426513], [88.4875213126, 372.2912057679, 95.2417421578], [88.4875212395, 372.2912057754, 95.2417406485], [111.9875175673, 388.6890936569, 95.2417420845], [93.9724139320, 425.5834809448, 95.2417449974], [153.1993656562, 424.9496082749, 95.2417437706], [93.9724144841, 425.5834812144, 95.2417436248], [111.9875170151, 388.6890933873, 95.2417434571], [153.1993655141, 424.9496084365, 95.2417431250], [111.9875171573, 388.6890932257, 95.2417441028], [137.2282018532, 375.5425139184, 95.2417442610], [137.2282009055, 375.5425142247, 95.2417438600], [182.4371630647, 387.8730525793, 95.2417424090], [153.1993664617, 424.9496081301, 95.2417435260], [115.3840635261, 362.4060360090, 95.2417407450], [88.4875210432, 372.2912045381, 95.2417405201], [98.7868166191, 298.5792004499, 95.2417416471], [115.3840626938, 362.4060362254, 95.2417401975], [98.7868174513, 298.5792002335, 95.2417421946], [151.1617498827, 325.7649813038, 95.2417416863], [160.2915862993, 372.2490912897, 95.2417417692], [115.3840627556, 362.4060362857, 95.2417412065], [151.1617498209, 325.7649812434, 95.2417406773], [68.7573106224, 374.8971620289, 95.2417412521], [25.8255596890, 337.9950034509, 95.2417414326], [32.3471506602, 281.0381348031, 95.2417422745], [25.8255597033, 337.9950034525, 95.2417424108], [-39.2821556428, 322.5493329765, 95.2417433352], [32.3471506459, 281.0381348014, 95.2417412963], [-39.2821556202, 322.5493328812, 95.2417429223], [25.8255596807, 337.9950035478, 95.2417428237], [-23.3553272467, 371.0021830862, 95.2417437954], [70.7428629668, 226.5500058510, 95.2417425039], [103.6671152934, 270.0573462078, 95.2417418737], [67.4214936682, 278.5339081308, 95.2417425994], [70.7428629068, 226.5500058964, 95.2417423979], [130.4585942529, 207.6774265435, 95.2417407575], [103.6671153534, 270.0573461624, 95.2417419796], [103.6671153945, 270.0573461801, 95.2417405931], [130.4585942117, 207.6774265259, 95.2417421440], [153.7830190524, 238.9029493774, 95.2417420654], [32.3471504597, 281.0381349319, 95.2417430540], [-38.8682185102, 238.8207414098, 95.2417444918], [-1.2223905625, 206.6581189247, 95.2417437606], [55.2944322765, 161.8221984942, 95.2417422562], [83.3382726879, 151.3787688998, 95.2417422802], [70.7428632646, 226.5500057096, 95.2417422596], [109.9311862339, 177.6990266252, 95.2417414302], [70.7428631521, 226.5500056907, 95.2417430262], [83.3382728004, 151.3787689186, 95.2417415136], [-14.6088364782, 11.9224002582, 95.2417402950], [50.2241971356, 47.4078749292, 95.2417412892], [28.7341095974, 90.0215326609, 95.2417424653], [68.4081270842, 100.3071232355, 95.2417414194], [28.7341089075, 90.0215323130, 95.2417419646], [50.2241978255, 47.4078752771, 95.2417417900], [50.2241979838, 47.4078752227, 95.2417420209], [107.4878814447, 102.4869977387, 95.2417416472], [68.4081269260, 100.3071232899, 95.2417411885], [107.4878814777, 102.4869977043, 95.2417419383], [50.2241979507, 47.4078752571, 95.2417417297], [135.9909544207, 9.6379518380, 95.2417418566], [144.6865549887, 106.5116344237, 95.2417421112], [107.4878814917, 102.4869977086, 95.2417420170], [135.9909544067, 9.6379518337, 95.2417417779], [144.6865554639, 106.5116343811, 95.2417404240], [135.9909539314, 9.6379518764, 95.2417434651], [167.8561008136, 1.1201819916, 95.2417400611], [167.8561007990, 1.1201819884, 95.2417403479], [178.7576287622, 87.5848270255, 95.2417386922], [144.6865554785, 106.5116343843, 95.2417401373], [199.3227930753, 44.9093016183, 95.2417395728], [178.7576297468, 87.5848269014, 95.2417388977], [167.8560998144, 1.1201821125, 95.2417401423], [-16.8746092608, 105.9689636618, 95.2417412338], [-58.1030625580, 125.2051775413, 95.2417409887], [-63.2480043533, 64.0665522242, 95.2417406254], [-58.1030625016, 125.2051775365, 95.2417413592], [-86.5948734853, 94.6550600655, 95.2417406602], [-63.2480044097, 64.0665522289, 95.2417402549], [-74.2194114174, -20.8499446100, 95.2417412195], [-63.2480044689, 64.0665518822, 95.2417412424], [-126.6439338638, -8.7789811191, 95.2417411296], [-63.2480044770, 64.0665518893, 95.2417409989], [-101.7219895454, 64.7633877809, 95.2417410805], [-126.6439338557, -8.7789811262, 95.2417413731], [-126.6439338684, -8.7789811219, 95.2417412063], [-101.7219895328, 64.7633877766, 95.2417412472], [-172.9770815927, 77.0799131810, 95.2417409907], [-190.4895839904, 29.1773577576, 95.2417406018], [-126.6439338535, -8.7789811139, 95.2417410336], [-172.9770816076, 77.0799131729, 95.2417411634], [-43.9609980949, -58.6307816175, 95.2417424755], [-74.2194126117, -20.8499450968, 95.2417403679], [-112.6997805871, -82.7649374376, 95.2417407433], [-93.3255825859, -123.2285072950, 95.2417415491], [-43.9609982212, -58.6307812578, 95.2417419116], [-112.6997804609, -82.7649377973, 95.2417413072], [-149.4260423946, -136.0172500094, 95.2417421616], [-93.3255824290, -123.2285072199, 95.2417418677], [-112.6997806178, -82.7649378725, 95.2417409886], [-116.3394866314, -169.7040358703, 95.2417423566], [-93.3255824075, -123.2285073145, 95.2417414774], [-149.4260424161, -136.0172499148, 95.2417425519]], triangles = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19, 20], [21, 22, 23], [24, 25, 26], [27, 28, 29], [30, 31, 32], [33, 34, 35], [36, 37, 38], [39, 40, 41], [42, 43, 44], [45, 46, 47], [48, 49, 50], [51, 52, 53], [54, 55, 56], [57, 58, 59], [60, 61, 62], [63, 64, 65], [66, 67, 68], [69, 70, 71], [72, 73, 74], [75, 76, 77], [78, 79, 80], [81, 82, 83], [84, 85, 86], [87, 88, 89], [90, 91, 92], [93, 94, 95], [96, 97, 98], [99, 100, 101], [102, 103, 104], [105, 106, 107], [108, 109, 110], [111, 112, 113], [114, 115, 116], [117, 118, 119], [120, 121, 122], [123, 124, 125], [126, 127, 128], [129, 130, 131], [132, 133, 134], [135, 136, 137], [138, 139, 140], [141, 142, 143], [144, 145, 146], [147, 148, 149], [150, 151, 152], [153, 154, 155]]);
/***********************************************
******      SolidPython code:      *************
************************************************
 
#! /usr/bin/env python
# -*- coding: UTF-8 -*-
from __future__ import division
import os
import sys
import re
import tree
import utilities
from numpy import array,cross
from tree import TriangleNode, parseArrayIntoTree, parseEdgeArrayIntoTree, cutTreeIntoPatches
from stl_reader import Reader
from graph2 import Graph,TreeNode,treeLength
from utilities import getMatrixArbitraryAxis
from dxf_writer import DXFWriter
from evolution import TreeWorld

# Assumes SolidPython is in site-packages or elsewhwere in sys.path
from solid import *
from solid.utils import *

SEGMENTS = 48

triangles = Reader.read("stl/rhino-quarter.stl")
g = Graph(triangles)
hFn = lambda e: g.defaultHeuristic(e)
msp = g.toMSPTree(hFn)
edge_rep = msp.makeEdgeRepresentation()

hFn = lambda e: -g.defaultHeuristic(e)
msp2 = g.toMSPTree(hFn)
edge_rep2 = msp2.makeEdgeRepresentation()

world = TreeWorld(g, [edge_rep, edge_rep2])
child1 = world.generateFittest()
print child1
tn = parseEdgeArrayIntoTree(g.nodes, child1)
print treeLength(msp,set()), "faces"
#tn = parseArrayIntoTree(g.nodes, array_rep)
tn.unfold()
v = tn.getAllChildVertices()
v2d = tn.getAllChildVertices2D()
tn.getAllChildTriangles()
kdtree = utilities.makeKDTree(tn.getAllChildTriangles())

intersects = tn.checkIntersection() # return nodes thats intersect
print len(intersects), "faces that intersects"
paths = world.paths_intersection(child1)
cutEdges = g.cutEdges(paths)
print "Edges to cut:", cutEdges
tns = cutTreeIntoPatches(tn,cutEdges)

#v_i = [ x.getTransformedVertices2D() for x in intersects ]
#v = reduce(lambda x,y: x+y, v_i)

#print [x.node for x in xs]
#print len(xs)


#array_rep = [19, 55, 115, 49, -1, 147, 55, 194, 230, 180, 14, 82, 8, 198, 157, 197, 196, 81, 254, 240, 148, 120, 26, 46, 181, 123, 210, 223, 125, 143, 52, 21, 107, 16, 212, 250, 125, 73, 196, 27, 75, 249, 167, 39, 57, 103, 166, 23, 207, 15, 3, 240, 178, 191, 33, 181, 111, 29, 184, 177, 7, 92, 118, 59, 15, 93, 129, 58, 199, 94, 97, 98, 40, 61, 143, 64, 234, 251, 75, 91, 32, 78, 186, 133, 76, 134, 90, 4, 187, 218, 51, 49, 218, 182, 106, 43, 176, 138, 121, 63, 216, 151, 36, 10, 149, 146, 47, 226, 198, 133, 66, 104, 103, 46, 162, 10, 113, 251, 25, 83, 114, 62, 11, 5, 114, 206, 120, 38, 245, 185, 159, 110, 238, 1, 189, 226, 87, 154, 142, 160, 96, 54, 44, 5, 233, 68, 74, 12, 242, 253, 54, 208, 222, 211, 33, 93, 124, 155, 127, 215, 137, 127, 168, 13, 50, 173, 19, 152, 2, 24, 230, 6, 248, 115, 195, 153, 222, 232, 170, 148, 51, 173, 52, 254, 34, 253, 171, 84, 203, 205, 153, 135, 8, 197, 128, 60, 246, 141, 4, 9, 108, 3, 140, 144, 79, 117, 221, 100, 45, 158, 214, 20, 32, 22, 175, 111, 76, 18, 182, 175, 119, 85, 190, 139, 163, 99, 151, 234, 22, 63, 8, 144, 177, 144, 76, 237, 113, 193, 239, 238, 19, 162, 26, 244, 174, 140, 235, 225, 172, 41, 249, 117, 84, 77, 18, 239]
#print array_rep
#tn = parseArrayIntoTree(g.nodes, array_rep)
#tn.unfold()
#v = tn.getAllChildVertices()

def assembly(v):
    a = polyhedron(
            points=v,
            triangles=[[x for x in range(y,y+3)] for y in range(0,len(v),3)])
    return a

def intersecting():
    a = polygon(
            points=v2d,
            paths=[[x for x in range(y,y+3)] for y in range(0,len(v),3)])
    return a

if __name__ == '__main__':
  for i,tn in enumerate(tns):
    v = tn.getAllChildVertices()
    a = assembly(v)
    scad_render_to_file(a,'unfold{0}.scad'.format(i), file_header='$fn = %s;' % SEGMENTS, include_orig_code=True)

    #a = intersecting()
    #scad_render_to_file(a,'unfold.scad', file_header='$fn = %s;' % SEGMENTS, include_orig_code=True)
    #d = DXFWriter(v2d) 
    #d.generate_file()
 
 
***********************************************/
                            
