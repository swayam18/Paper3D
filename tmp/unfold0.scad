$fn = 48;

polyhedron(points = [[-14.6088364060, 11.9224002258, 95.2417413936], [-74.2194118880, -20.8499445172, 95.2417414959], [-43.9609988186, -58.6307821971, 95.2417413475], [38.9255295343, -28.8750927454, 95.2417418154], [-14.6088363780, 11.9224002142, 95.2417416042], [-43.9609988465, -58.6307821855, 95.2417411369], [-43.9609988430, -58.6307821952, 95.2417417036], [-0.5262010384, -67.3900668776, 95.2417416656], [38.9255295308, -28.8750927356, 95.2417412487], [58.4975517449, -109.6241145972, 95.2417417320], [38.9255301105, -28.8750933294, 95.2417407502], [-0.5262016181, -67.3900662838, 95.2417421641], [70.5368871530, -78.9159008313, 95.2417412091], [38.9255301071, -28.8750933302, 95.2417411325], [58.4975517484, -109.6241145964, 95.2417413498], [108.6142414023, 6.7148104846, 95.2417411533], [38.9255301255, -28.8750933186, 95.2417411455], [70.5368871346, -78.9159008429, 95.2417411960], [165.8231773942, -98.4260690677, 95.2417399403], [70.5368867863, -78.9159006875, 95.2417429814], [58.4975521150, -109.6241147401, 95.2417395774], [165.8231774900, -98.4260686002, 95.2417416275], [165.9977418336, -61.0107169660, 95.2417415332], [70.5368866906, -78.9159011550, 95.2417412942], [165.8231774884, -98.4260686002, 95.2417415387], [228.0796871274, -105.2282615699, 95.2417431347], [165.9977418352, -61.0107169660, 95.2417416221], [165.9977418309, -61.0107169516, 95.2417414546], [117.6915572193, 2.0713859691, 95.2417412460], [70.5368866933, -78.9159011694, 95.2417413729], [58.4975521134, -109.6241147252, 95.2417398642], [143.1930240192, -130.1583590984, 95.2417382084], [165.8231773958, -98.4260690825, 95.2417396536], [98.4795150908, -145.8053578942, 95.2417390891], [143.1930237854, -130.1583600629, 95.2417384140], [58.4975523472, -109.6241137608, 95.2417396586], [193.9837713204, -160.2000008834, 95.2417374194], [165.8231773061, -98.4260690186, 95.2417389703], [143.1930241089, -130.1583591624, 95.2417388917], [225.9405733823, -115.9771802767, 95.2417392242], [165.8231772654, -98.4260690371, 95.2417375838], [193.9837713611, -160.2000008648, 95.2417388059], [225.9405733213, -115.9771802326, 95.2417393301], [193.9837714221, -160.2000009089, 95.2417387000], [230.4075076715, -167.8751964545, 95.2417394257], [-0.5262010462, -67.3900669159, 95.2417416647], [-43.9609988353, -58.6307821569, 95.2417417045], [-47.6763941053, -139.8460777401, 95.2417422734], [-47.6763940987, -139.8460777404, 95.2417418076], [-43.9609988418, -58.6307821566, 95.2417421702], [-86.6659088013, -117.6542381806, 95.2417415657], [-86.4688732344, -182.3426316414, 95.2417424202], [-47.6763940127, -139.8460775892, 95.2417421262], [-86.6659088874, -117.6542383318, 95.2417412471], [-40.0794028212, -191.1481270104, 95.2417426151], [-47.6763939410, -139.8460776546, 95.2417417359], [-86.4688733061, -182.3426315760, 95.2417428105], [-47.6763938098, -139.8460776352, 95.2417416775], [-40.0794029524, -191.1481270298, 95.2417426736], [-3.0922257156, -151.9105367378, 95.2417418053], [-47.6763938044, -139.8460776150, 95.2417417279], [-3.0922257211, -151.9105367580, 95.2417417549], [16.6187719218, -82.0607345398, 95.2417411717], [-107.2541645324, -111.0339902121, 95.2417418540], [-86.4688726243, -182.3426316396, 95.2417421729], [-86.6659094975, -117.6542383337, 95.2417414944], [-141.2695556546, -69.3567557152, 95.2417419005], [-107.2541645577, -111.0339902906, 95.2417418244], [-86.6659094722, -117.6542382552, 95.2417415241], [-141.2695556477, -69.3567557096, 95.2417419073], [-201.9986810448, -129.7153215926, 95.2417419302], [-107.2541645645, -111.0339902962, 95.2417418175], [-201.9986810428, -129.7153216031, 95.2417416868], [-172.0309993314, -153.8539040003, 95.2417417683], [-107.2541645666, -111.0339902857, 95.2417420609], [-107.2541645592, -111.0339902968, 95.2417418942], [-172.0309993387, -153.8539039892, 95.2417419351], [-123.2897861813, -207.2699978415, 95.2417416785], [-208.4550655401, -58.7005603408, 95.2417418877], [-201.9986813659, -129.7153212696, 95.2417414600], [-141.2695553267, -69.3567560326, 95.2417423775], [-264.3242279455, -134.3875908067, 95.2417417947], [-201.9986813848, -129.7153212713, 95.2417414401], [-208.4550655211, -58.7005603391, 95.2417419076], [-86.4688726053, -182.3426316341, 95.2417417976], [-107.2541645514, -111.0339902177, 95.2417422293], [-131.9533891963, -205.4186214396, 95.2417423592], [-131.9533892064, -205.4186214198, 95.2417416418], [-74.9344958362, -240.4390316527, 95.2417415432], [-86.4688725953, -182.3426316538, 95.2417425149], [-74.9344958875, -240.4390317361, 95.2417411303], [-131.9533891551, -205.4186213363, 95.2417420547], [-110.5219934535, -285.3850666218, 95.2417400159], [-18.4762981821, -244.6075394336, 95.2417399716], [-74.9344958988, -240.4390317272, 95.2417401521], [-110.5219934422, -285.3850666308, 95.2417409941], [-110.5219935392, -285.3850664120, 95.2417405595], [-87.4467343920, -311.9183115414, 95.2417405994], [-18.4762980851, -244.6075396524, 95.2417404062], [-87.4467343957, -311.9183115446, 95.2417405517], [-110.5219935355, -285.3850664088, 95.2417406072], [-121.7904445910, -351.0829277214, 95.2417419907], [-110.5219934860, -285.3850664173, 95.2417424395], [-186.8051593063, -314.3709160357, 95.2417418141], [-121.7904446405, -351.0829277130, 95.2417401585], [-178.4248530623, -386.0241189716, 95.2417409089], [-121.7904447120, -351.0829278397, 95.2417410460], [-186.8051592348, -314.3709159090, 95.2417409266], [-232.2128535286, -347.8298232057, 95.2417408417], [-178.4248530705, -386.0241189726, 95.2417407880], [-186.8051592266, -314.3709159080, 95.2417410476], [-186.8051591295, -314.3709160398, 95.2417412337], [-265.5032548677, -322.5940913475, 95.2417410494], [-232.2128536256, -347.8298230739, 95.2417406555], [-232.2128536500, -347.8298231061, 95.2417412020], [-265.5032548433, -322.5940913154, 95.2417405030], [-293.5576762402, -348.9319452027, 95.2417400977], [-247.1545820706, -390.8014652980, 95.2417410766], [-232.2128536510, -347.8298230495, 95.2417408315], [-293.5576762392, -348.9319452592, 95.2417404682], [-213.3084383148, -272.5472525195, 95.2417408072], [-265.5032548784, -322.5940912448, 95.2417407503], [-186.8051591188, -314.3709161425, 95.2417415329], [-132.8178246299, -253.1772189139, 95.2417400978], [-213.3084383151, -272.5472525197, 95.2417415357], [-186.8051591185, -314.3709161423, 95.2417408044], [-51.0805138629, -319.8615599613, 95.2417398856], [-18.4762981076, -244.6075396294, 95.2417406913], [-87.4467343696, -311.9183115644, 95.2417403143], [-18.4762987449, -244.6075393533, 95.2417416094], [-51.0805132256, -319.8615602374, 95.2417389674], [-6.3410459894, -260.3811844193, 95.2417406389], [5.7315878113, -286.3694906730, 95.2417394645], [-6.3410460773, -260.3811843531, 95.2417392396], [-51.0805131377, -319.8615603035, 95.2417403667], [-6.3410451444, -260.3811839198, 95.2417386341], [5.7315868784, -286.3694911063, 95.2417400701], [45.1917501713, -275.0277414514, 95.2417429830], [45.1917501914, -275.0277413807, 95.2417414737], [-0.3519220323, -241.4021786895, 95.2417406369], [-6.3410451645, -260.3811839905, 95.2417401434], [34.2931515732, -333.2467602829, 95.2417417562], [45.1917503410, -275.0277420420, 95.2417416104], [5.7315867087, -286.3694905158, 95.2417414427], [34.2931517570, -333.2467601710, 95.2417411106], [5.7315865249, -286.3694906278, 95.2417420884], [-11.5942728680, -308.9468976468, 95.2417422466], [-11.5942724019, -308.9468967666, 95.2417418456], [-7.2932637889, -355.6094487815, 95.2417403946], [34.2931512909, -333.2467610511, 95.2417415116], [-37.4268326520, -320.8885702290, 95.2417410226], [-7.2932633664, -355.6094487425, 95.2417422787], [-11.5942728243, -308.9468968056, 95.2417399615], [-7.2932635417, -355.6094488946, 95.2417419320], [-37.4268324767, -320.8885700769, 95.2417413693], [-52.4780847975, -369.8382341200, 95.2417408401], [-37.4268325593, -320.8885700515, 95.2417403603], [-101.4131275595, -336.8600319295, 95.2417423573], [-52.4780847149, -369.8382341454, 95.2417418491], [-43.9609985330, -58.6307823801, 95.2417427341], [-90.3618240596, -44.8493946513, 95.2417406264], [-86.6659091102, -117.6542379572, 95.2417410018], [38.9255295293, -28.8750927520, 95.2417416962], [49.5263421922, 48.6541307900, 95.2417416713], [-14.6088363730, 11.9224002208, 95.2417417233], [-14.6088363818, 11.9224002362, 95.2417412003], [49.5263422010, 48.6541307746, 95.2417421944], [27.2167692687, 90.8445401498, 95.2417433705], [-14.6088363610, 11.9224002252, 95.2417413465], [27.2167692478, 90.8445401608, 95.2417432243], [-18.6916131184, 105.9076162166, 95.2417427906], [66.6846114993, 101.8949006266, 95.2417423246], [27.2167685856, 90.8445397886, 95.2417428698], [49.5263428841, 48.6541311358, 95.2417426952], [49.5263430434, 48.6541310844, 95.2417429261], [105.7149425478, 104.8295747085, 95.2417425524], [66.6846113401, 101.8949006779, 95.2417420937], [66.6846114467, 101.8949008145, 95.2417423855], [10.3341807185, 136.1154359567, 95.2417428379], [27.2167686382, 90.8445396007, 95.2417428089]], triangles = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19, 20], [21, 22, 23], [24, 25, 26], [27, 28, 29], [30, 31, 32], [33, 34, 35], [36, 37, 38], [39, 40, 41], [42, 43, 44], [45, 46, 47], [48, 49, 50], [51, 52, 53], [54, 55, 56], [57, 58, 59], [60, 61, 62], [63, 64, 65], [66, 67, 68], [69, 70, 71], [72, 73, 74], [75, 76, 77], [78, 79, 80], [81, 82, 83], [84, 85, 86], [87, 88, 89], [90, 91, 92], [93, 94, 95], [96, 97, 98], [99, 100, 101], [102, 103, 104], [105, 106, 107], [108, 109, 110], [111, 112, 113], [114, 115, 116], [117, 118, 119], [120, 121, 122], [123, 124, 125], [126, 127, 128], [129, 130, 131], [132, 133, 134], [135, 136, 137], [138, 139, 140], [141, 142, 143], [144, 145, 146], [147, 148, 149], [150, 151, 152], [153, 154, 155], [156, 157, 158], [159, 160, 161], [162, 163, 164], [165, 166, 167], [168, 169, 170], [171, 172, 173], [174, 175, 176], [177, 178, 179]]);
/***********************************************
******      SolidPython code:      *************
************************************************
 
#! /usr/bin/env python
# -*- coding: UTF-8 -*-
from __future__ import division
import os
import sys
import re
import tree
import utilities
from numpy import array,cross
from tree import TriangleNode, parseArrayIntoTree, parseEdgeArrayIntoTree, cutTreeIntoPatches
from stl_reader import Reader
from graph2 import Graph,TreeNode,treeLength
from utilities import getMatrixArbitraryAxis
from dxf_writer import DXFWriter
from evolution import TreeWorld

# Assumes SolidPython is in site-packages or elsewhwere in sys.path
from solid import *
from solid.utils import *

SEGMENTS = 48

triangles = Reader.read("stl/rhino-quarter.stl")
g = Graph(triangles)
hFn = lambda e: g.defaultHeuristic(e)
msp = g.toMSPTree(hFn)
edge_rep = msp.makeEdgeRepresentation()

hFn = lambda e: -g.defaultHeuristic(e)
msp2 = g.toMSPTree(hFn)
edge_rep2 = msp2.makeEdgeRepresentation()

world = TreeWorld(g, [edge_rep, edge_rep2])
child1 = world.generateFittest()
print child1
tn = parseEdgeArrayIntoTree(g.nodes, child1)
print treeLength(msp,set()), "faces"
#tn = parseArrayIntoTree(g.nodes, array_rep)
tn.unfold()
v = tn.getAllChildVertices()
v2d = tn.getAllChildVertices2D()
tn.getAllChildTriangles()
kdtree = utilities.makeKDTree(tn.getAllChildTriangles())

intersects = tn.checkIntersection() # return nodes thats intersect
print len(intersects), "faces that intersects"
paths = world.paths_intersection(child1)
cutEdges = g.cutEdges(paths)
print "Edges to cut:", cutEdges
tns = cutTreeIntoPatches(tn,cutEdges)

#v_i = [ x.getTransformedVertices2D() for x in intersects ]
#v = reduce(lambda x,y: x+y, v_i)

#print [x.node for x in xs]
#print len(xs)


#array_rep = [19, 55, 115, 49, -1, 147, 55, 194, 230, 180, 14, 82, 8, 198, 157, 197, 196, 81, 254, 240, 148, 120, 26, 46, 181, 123, 210, 223, 125, 143, 52, 21, 107, 16, 212, 250, 125, 73, 196, 27, 75, 249, 167, 39, 57, 103, 166, 23, 207, 15, 3, 240, 178, 191, 33, 181, 111, 29, 184, 177, 7, 92, 118, 59, 15, 93, 129, 58, 199, 94, 97, 98, 40, 61, 143, 64, 234, 251, 75, 91, 32, 78, 186, 133, 76, 134, 90, 4, 187, 218, 51, 49, 218, 182, 106, 43, 176, 138, 121, 63, 216, 151, 36, 10, 149, 146, 47, 226, 198, 133, 66, 104, 103, 46, 162, 10, 113, 251, 25, 83, 114, 62, 11, 5, 114, 206, 120, 38, 245, 185, 159, 110, 238, 1, 189, 226, 87, 154, 142, 160, 96, 54, 44, 5, 233, 68, 74, 12, 242, 253, 54, 208, 222, 211, 33, 93, 124, 155, 127, 215, 137, 127, 168, 13, 50, 173, 19, 152, 2, 24, 230, 6, 248, 115, 195, 153, 222, 232, 170, 148, 51, 173, 52, 254, 34, 253, 171, 84, 203, 205, 153, 135, 8, 197, 128, 60, 246, 141, 4, 9, 108, 3, 140, 144, 79, 117, 221, 100, 45, 158, 214, 20, 32, 22, 175, 111, 76, 18, 182, 175, 119, 85, 190, 139, 163, 99, 151, 234, 22, 63, 8, 144, 177, 144, 76, 237, 113, 193, 239, 238, 19, 162, 26, 244, 174, 140, 235, 225, 172, 41, 249, 117, 84, 77, 18, 239]
#print array_rep
#tn = parseArrayIntoTree(g.nodes, array_rep)
#tn.unfold()
#v = tn.getAllChildVertices()

def assembly(v):
    a = polyhedron(
            points=v,
            triangles=[[x for x in range(y,y+3)] for y in range(0,len(v),3)])
    return a

def intersecting():
    a = polygon(
            points=v2d,
            paths=[[x for x in range(y,y+3)] for y in range(0,len(v),3)])
    return a

if __name__ == '__main__':
  for i,tn in enumerate(tns):
    v = tn.getAllChildVertices()
    a = assembly(v)
    scad_render_to_file(a,'unfold{0}.scad'.format(i), file_header='$fn = %s;' % SEGMENTS, include_orig_code=True)

    #a = intersecting()
    #scad_render_to_file(a,'unfold.scad', file_header='$fn = %s;' % SEGMENTS, include_orig_code=True)
    #d = DXFWriter(v2d) 
    #d.generate_file()
 
 
***********************************************/
                            
