import numpy as np
from unionfind import UnionFind
from numpy import matrix, linalg, cross, dot, array
from math import cos, sin, pi

eps = 0.0001
def close_enough(edge1, edge2):
    # edge: (v1,v2)
    e1v1 = edge1[0]
    e1v2 = edge1[1]
    e2v1 = edge2[0]
    e2v2 = edge2[1]

    diff_x = abs(e1v1[0] - e2v1[0]) < eps
    diff_y = abs(e1v1[1] - e2v1[1]) < eps 
    diff_z = abs(e1v1[2] - e2v1[2]) < eps
    s = diff_x and diff_y and diff_z
    diff_x = abs(e1v2[0] - e2v2[0]) < eps
    diff_y = abs(e1v2[1] - e2v2[1]) < eps 
    diff_z = abs(e1v2[2] - e2v2[2]) < eps
    a = diff_x and diff_y and diff_z

    return a and s

def vertex_close_enough(v1,v2):
    diff_x = abs(v1[0] - v2[0]) < eps
    diff_y = abs(v1[1] - v2[1]) < eps 
    diff_z = abs(v1[2] - v2[2]) < eps
    return diff_x and diff_y and diff_z

def memoize(f):
    """ Memoization decorator for a function taking one or more arguments. """
    class memodict(dict):
        def __getitem__(self, *key):
            return dict.__getitem__(self, key)

        def __missing__(self, key):
            ret = self[key] = f(*key)
            return ret

    return memodict().__getitem__

def flatternMatrixArray(array):
    return reduce(lambda m1,m2: matrixMultiply(m1,m2), array)

@memoize
def matrixMultiply(m1,m2):
    return m1*m2

def getUnfoldingMatrix(normal1, normal2, edge):
    m1 = getTranslationMatrix((-edge[0]-edge[1])/2)
    axis = unitVector(cross(normal1,normal2))
    m2 = getMatrixArbitraryAxis(axis, angleBetween(normal1,normal2))
    m3 = getTranslationMatrix((edge[0]+edge[1])/2)
    return m3 * m2 * m1

def getMatrixArbitraryAxis(axis, angle):
    x,y,z = axis[:3]
    c = cos(angle)
    s = sin(angle)
    t = 1 - c
    return matrix([
        [t*x*x + c,   t*x*y - s*z, t*x*z + s*y, 0],
        [t*x*y + s*z, t*y*y + c,   t*y*z - s*x, 0],
        [t*x*z - s*y, t*y*z + s*x, t*z*z + c,   0],
        [0,           0,           0,           1]])

def angleBetween(v1,v2):
    v1_u = unitVector(v1)
    v2_u = unitVector(v2)
    angle = np.arccos(np.dot(v1_u, v2_u))
    reference = unitVector((array([0,0,1]),v1_u))
    if np.isnan(angle):
        if (v1_u == v2_u).all():
            return 0.0
        else:
            return np.pi
    return -angle

def getTranslationMatrix(vector):
    return matrix([
            [1,0,0,vector[0]],
            [0,1,0,vector[1]],
            [0,0,1,vector[2]],
            [0,0,0,1]])

def columnCross(v1,v2):
    return cross(v1.T[0,0:3],v2.T[0,0:3]).T

def getNormal(vertices):
    edge1 = vertices[0] - vertices[1]
    edge2 = vertices[0] - vertices[2]
    v = cross(edge1[:3], edge2[:3])
    return np.append(unitVector(v),0)

def unitVector(vector):
    norm = np.linalg.norm(vector)
    if norm == 0:
        return vector
    return vector / norm

# check if p1 -> p2 intersects pA -> pB
def checkLineIntersection(point1, point2, pointA, pointB):
   assert((len(point1) == 2) and (len(pointA) == 2))
   a,b = point1
   c,d = point2
   p,q = pointA
   r,s = pointB
   det = float((c - a) * (q - s) - (p - r) * (d - b))
   if det == 0:
       return False
   l = round(((q - s) * (p - a) + (r - p) * (q - b)) / det,6)
   g = round(((b - d) * (p - a) + (c - a) * (q - b)) / det,6)
   return (0.0 < l and l < 1.0) and (0.0 < g and g < 1.0)

#print checkLineIntersection((0,0),(1,1),(0,1),(1,0))

def planeCheck(p1,p2,p3):
    return (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1])

def checkPointInTriangle(point, vertices):
    b1 = planeCheck(point, vertices[0], vertices[1]) < 0
    b2 = planeCheck(point, vertices[1], vertices[2]) < 0
    b3 = planeCheck(point, vertices[2], vertices[0]) < 0
    return b1 == b2 and b1 == b3

def checkTriangleIntersection(t1,t2):
    for i in range(3):
        for j in range(3):
            if checkLineIntersection(t1[i],t1[(i+1)%3],t2[j],t2[(j+1)%3]):
                return True
    t1 = [tuple(x) for x in t1]
    t2 = [tuple(x) for x in t2]
    s1 = set(t1)
    s2 = set(t2)
    _s1 = s1 - s2
    _s2 = s2 - s1
    if len(_s1) == 0: return False
    for v in _s1:
        if checkPointInTriangle(v,t2):
            return True
    for v in _s2:
        if checkPointInTriangle(v,t1):
            return True
    return False
    

def checkTriangleIntersections(t1, triangles):
    for i,t in enumerate(triangles):
        if checkTriangleIntersection(t1,t): return i
    return False

def makeKDTree(triangles):
    ts = [Triangle(x) for x in triangles]
    bbMin = [float('inf'),float('inf')]
    bbMax = [float('-inf'),float('-inf')]
    axis = 0
    for t in ts:
        bbMin[0] = min(bbMin[0], t.bbMin[0])
        bbMin[1] = min(bbMin[1], t.bbMin[1])
        bbMax[0] = max(bbMax[0], t.bbMax[0])
        bbMax[1] = max(bbMax[1], t.bbMax[1])
    root = _makeKDTree(ts, bbMin, bbMax, axis) 
    return root

def _makeKDTree(triangles, bbMin, bbMax, axis):
    root = KdNode(axis)
    root.bbMin = bbMin
    root.bbMax = bbMax
    root.objects = triangles
    if len(triangles) < 4:
        root.leaf = True
        return root
    middle = (bbMin[axis] + bbMax[axis]) / 2
    root.middle = middle
    left_triangles = []
    right_triangles = []
    for t in triangles:
        if t.bbMax[axis] <= middle:
            left_triangles.append(t)
        if t.bbMin[axis] >= middle:
            right_triangles.append(t)

    left_bbMax = bbMax[:]
    left_bbMax[axis] = middle
    right_bbMin = bbMin[:]
    right_bbMin[axis] = middle

    root.left = _makeKDTree(left_triangles, bbMin, left_bbMax, (axis+1)%2)
    root.right = _makeKDTree(right_triangles, right_bbMin, bbMax, (axis+1)%2)
    return root
    
class KdNode:
    def __init__(self,axis):
        self.axis = axis
        self.bbMin = []
        self.bbMax = []
        self.middle = None
        self.leaf = False
        self.objects = []
        self.left = None
        self.right = None

    def intersection(self,triangle):
        if self.leaf:
            for t in self.objects:
                if checkTriangleIntersection(triangle.vs, t.vs): return True
            return False
        else:
            if not triangle.bbMin[self.axis] > self.middle[self.axis]:
                return self.left.intersection(triangle)
            if not triangle.bbMax[self.axis] < self.middle[self.axis]:
                return self.right.intersection(triangle)

class Triangle:
    def __init__(self,vs):
        self.vs = vs
        self.bbMin = [0,0]
        self.bbMax = [0,0]
        self.bbMin[0] = reduce(lambda x,y: min(x,y), [x[0] for x in vs])
        self.bbMin[1] = reduce(lambda x,y: min(x,y), [x[1] for x in vs])
        self.bbMax[0] = reduce(lambda x,y: max(x,y), [x[0] for x in vs])
        self.bbMax[1] = reduce(lambda x,y: max(x,y), [x[1] for x in vs])

def makeUnionFind(_set,N):
    uf = UnionFind(N)
    for i,j in _set:
        uf.union(i,j)
    return uf

#assert(checkTriangleIntersection([(0,0),(1,0),(0,1)],[(0,0),(0.5,0),(0,0.5)]))
#assert(checkTriangleIntersection([(0,0),(1,0),(0,1)],[(0,0),(1,0),(0,1)]))
#assert(checkTriangleIntersection([(0,0),(1,0),(0,1)],[(0,0),(1,0),(0,0.5)]))
#assert(not checkTriangleIntersection([(0,0),(1,0),(0,1)],[(0,0),(-1,0),(0,-1)]))
#assert(not checkTriangleIntersection([(0,0),(1,0),(0,1)],[(-0.1,-0.1),(-1,0),(0,-1)]))
#assert(checkTriangleIntersection([(0,0),(1,0),(0,1)],[(0.1,0.1),(0.5,0.1),(0.1,0.5)]))
#assert(not checkTriangleIntersection([(0,0),(1,0),(0,1)],[(0,1),(1,0),(1,1)]))
#assert(not checkTriangleIntersection([(0,0),(1,0),(0,1)],[(0,0),(0,1),(-1,0)]))
#assert(not checkTriangleIntersection([[-12.04447, -1.52985], [7.34713, -9.66589], [4.69735, 11.19574]],[[26.73872, -17.80193], [24.08894, 3.0597], [7.34713, -9.66589]]))

triangles = [[[-14.608836405954111, 11.92240022578919], [-74.21941188801817, -20.84994451718047], [-43.96099881856263, -58.63078219710928]], [[-14.608836424891594, 11.922400260235124], [-63.24800401728979, 64.06655182388533], [-74.21941186908069, -20.849944551626407]], [[-16.87460961075916, 105.96896404912354], [-63.248004003346836, 64.0665518368911], [-14.608836438834565, 11.922400247229362]], [[-14.608836457619667, 11.922400246776794], [28.734109576798545, 90.02153267236491], [-16.874609591974057, 105.9689640495761]], [[45.45858522748469, 127.43961642715624], [-16.874609506144754, 105.9689642950429], [28.73410949096923, 90.02153242689812]], [[-16.87460949756685, 105.96896427013968], [45.45858521890679, 127.43961645205945], [-9.765347222956109, 150.90531565298113]], [[45.45858514884236, 127.43961628717052], [55.29443224504655, 161.82219848167804], [-9.765347152891659, 150.90531581787005]], [[80.268449540202, 145.33521363234368], [55.294432288287126, 161.82219846930818], [45.458585105601784, 127.43961629954038]], [[-9.76534715073659, 150.90531580502682], [55.294432242891475, 161.82219849452125], [-1.2223906149486155, 206.6581190798557]], [[-1.222390453187316, 206.65811905506914], [-51.15910420068649, 145.27949488456], [-9.765347312497873, 150.90531582981336]], [[-49.51852572438292, 217.57260281281648], [-51.15910428077247, 145.27949494971674], [-1.222390373101355, 206.65811898991242]], [[55.294432248030745, 161.82219850099943], [70.74286329312076, 226.55000570278904], [-1.2223906200878716, 206.65811907337758]], [[32.347150478459454, 281.0381349233862], [-1.222390581323257, 206.65811893313418], [70.74286325435614, 226.55000584303235]], [[67.4214933395419, 278.53390810980693], [32.34715043739925, 281.03813489445264], [70.74286329541633, 226.55000587196594]], [[32.347150437053244, 281.0381348896064], [67.42149333988792, 278.5339081146532], [68.75731084547698, 374.89716194230385]], [[98.786815863824, 298.5792001803972], [68.75731081330179, 374.89716194274985], [67.42149337206307, 278.5339081142072]], [[68.75731016700509, 374.8971616884458], [98.78681651012069, 298.57920043470125], [88.48752115215132, 372.29120455333873]], [[93.97241385885266, 425.5834809522825], [68.75731000659081, 374.8971604739173], [88.4875213125656, 372.29120576786715]], [[88.4875212394618, 372.2912057753911], [111.98751756725243, 388.68909365693077], [93.97241393195642, 425.5834809447585]], [[153.19936565622862, 424.9496082748986], [93.97241448411887, 425.5834812143731], [111.98751701508994, 388.6890933873162]], [[153.1993655140616, 424.9496084364784], [111.987517157257, 388.6890932257364], [137.2282018531714, 375.5425139183994]], [[111.98751753283518, 388.6890939468251], [102.92534300606712, 343.6175020569865], [137.22820147759325, 375.5425131973107]], [[137.2282009054926, 375.5425142247427], [182.43716306470736, 387.87305257933485], [153.19936646174045, 424.94960813013506]], [[115.38406352606394, 362.40603600898044], [88.48752104320374, 372.29120453811623], [98.78681661906823, 298.5792004499238]], [[115.38406269381166, 362.40603622539555], [98.78681745132052, 298.57920023350863], [151.1617498826644, 325.7649813037961]], [[160.29158629931288, 372.2490912896553], [115.38406275561559, 362.40603628574326], [151.16174982086048, 325.7649812434484]], [[68.75731062236522, 374.8971620288542], [25.82555968901173, 337.9950034509012], [32.34715066016503, 281.038134803056]], [[25.82555970331475, 337.99500345253887], [-39.28215564275732, 322.549332976489], [32.347150645862015, 281.03813480141827]], [[-39.28215562016031, 322.54933288123647], [25.825559680717763, 337.99500354779144], [-23.355327246678332, 371.0021830862123]], [[70.7428629667995, 226.5500058509698], [103.66711529335666, 270.0573462078293], [67.42149366815875, 278.533908130803]], [[70.74286290679622, 226.55000589637737], [130.45859425285744, 207.67742654353316], [103.66711535335996, 270.05734616242177]], [[103.66711539447657, 270.05734618008086], [130.45859421174083, 207.677426525874], [153.78301905241278, 238.9029493774161]], [[32.34715045967693, 281.0381349318633], [-38.86821851024365, 238.8207414097981], [-1.2223905625407383, 206.65811892465717]], [[55.2944322765223, 161.8221984941994], [83.3382726879144, 151.37876889977917], [70.74286326462918, 226.55000570958904]], [[109.93118623388798, 177.69902662517754], [70.742863152127, 226.5500056907386], [83.33827280041658, 151.37876891862962]], [[-14.608836478230435, 11.922400258215228], [50.224197135596896, 47.407874929226416], [28.734109597409315, 90.02153266092648]], [[68.40812708423331, 100.30712323547255], [28.73410890750499, 90.02153231300741], [50.22419782550122, 47.40787527714551]], [[50.22419798375472, 47.40787522274644], [107.48788144466369, 102.48699773866254], [68.40812692597983, 100.30712328987164]], [[107.48788147770688, 102.4869977043088], [50.22419795071154, 47.40787525710021], [135.99095442073875, 9.637951838029963]], [[144.6865549886575, 106.5116344237471], [107.487881491738, 102.48699770861612], [135.99095440670757, 9.637951833722642]], [[144.6865554639177, 106.51163438108665], [135.9909539314474, 9.637951876383106], [167.85610081356427, 1.120181991625536]], [[167.85610079895056, 1.12018198841281], [178.75762876223723, 87.58482702551123], [144.68655547853143, 106.51163438429937]], [[199.32279307528285, 44.909301618323376], [178.7576297468106, 87.58482690137545], [167.85609981437722, 1.1201821125485694]], [[-16.874609260798543, 105.96896366182214], [-58.10306255795011, 125.2051775412734], [-63.24800435330746, 64.06655222419246]], [[-58.10306250159599, 125.20517753653108], [-86.59487348530018, 94.65506006547395], [-63.2480044096616, 64.06655222893478]], [[-74.21941141744215, -20.849944609979154], [-63.24800446892829, 64.06655188223809], [-126.6439338638368, -8.778981119138948]], [[-74.21941141546307, -20.849944601384028], [-126.64393386581585, -8.778981127734085], [-146.96771814452853, -16.17139096253858]], [[-126.6439338376252, -8.778981205237983], [-186.78328463362703, 34.81240771244435], [-146.96771817271917, -16.171390885034704]], [[-63.24800447701553, 64.06655188927624], [-101.72198954538617, 64.76338778087566], [-126.64393385574957, -8.778981126177094]], [[-126.64393386837234, -8.778981121899506], [-101.72198953276339, 64.76338777659807], [-172.9770815926904, 77.07991318098001]], [[-190.4895839904171, 29.177357757647457], [-126.6439338534789, -8.778981113862358], [-172.9770816075839, 77.07991317294285]], [[-43.96099809490119, -58.63078161753377], [-74.21941261167962, -20.84994509675599], [-112.69978058714966, -82.7649374376274]], [[-93.32558258594358, -123.22850729500387], [-43.96099822119367, -58.63078125782815], [-112.6997804608572, -82.764937797333]], [[-149.4260423945776, -136.01725000940647], [-93.32558242904926, -123.22850721988193], [-112.69978061775149, -82.76493787245494]], [[-116.33948663139874, -169.704035870303], [-93.32558240748514, -123.22850731447744], [-149.4260424161417, -136.01724991481098]], [[38.92552953434351, -28.8750927453503], [-14.608836377996555, 11.92240021415804], [-43.96099884652017, -58.630782185478125]], [[-43.960998843023845, -58.63078219521742], [-0.526201038434543, -67.39006687763882], [38.925529530847186, -28.875092735611013]], [[-0.5262010461603062, -67.39006691594867], [-43.96099883529807, -58.630782156907536], [-47.6763941052772, -139.84607774010624]], [[58.497551744927236, -109.62411459721818], [38.925530110549076, -28.875093329412373], [-0.5262016181364189, -67.39006628383748]], [[32.02630457117927, -147.47345128951196], [58.49755176452027, -109.62411456983615], [-0.5262016377294394, -67.3900663112195]], [[32.02630458836553, -147.47345130153175], [82.86402142929164, -157.72728417381143], [58.49755174733403, -109.62411455781633]], [[38.92552952931264, -28.875092751951804], [49.526342192199586, 48.654130790023565], [-14.608836372965676, 11.92240022075954]], [[49.5263422010339, 48.654130788815614], [38.925529520478314, -28.875092750743846], [98.05573254320636, -31.516948182896133]], [[98.05573254417733, -31.516948161163704], [38.92552951950735, -28.87509277247627], [116.38195365856964, -58.94120037147894]]]

